{
	"info": {
		"_postman_id": "3b814d34-24b2-4e84-8da1-11e8d737ddfd",
		"name": "QA-Training",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "crm",
			"item": [
				{
					"name": "agent",
					"item": [
						{
							"name": "Login as an agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"const name = 'agent101'",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify agent's name\", function () {",
											"    pm.expect(jsonData.data.authenticate.user.name).to.eql(name);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query login ($email: String!, $password: String!){\n  authenticate (email: $email, password:$password){\n    token\n    refresh\n    accessTokenExpiry\n    refreshTokenExpiry\n    user{\n      id\n      name\n      kind\n      email\n      agent{\n        partners{\n          id\n          name\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n    \"email\" : \"agent.test@gmial.com\",\n    \"password\" : \"555555\"\n}"
									}
								},
								"url": {
									"raw": "https://staging-backend.bfree.com.ng/api/",
									"protocol": "https",
									"host": [
										"staging-backend",
										"bfree",
										"com",
										"ng"
									],
									"path": [
										"api",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Login as an agent with invalid email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"incorrect email or password\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"incorrect email or password\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query login ($email: String!, $password: String!){\n  authenticate (email: $email, password:$password){\n    token\n    refresh\n    accessTokenExpiry\n    refreshTokenExpiry\n    user{\n      id\n      name\n      kind\n      email\n      agent{\n        partners{\n          id\n          name\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n    \"email\" : \"agent.test@gmial\",\n    \"password\" : \"555555\"\n}"
									}
								},
								"url": {
									"raw": "https://staging-backend.bfree.com.ng/api/",
									"protocol": "https",
									"host": [
										"staging-backend",
										"bfree",
										"com",
										"ng"
									],
									"path": [
										"api",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Login as an agent with no credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"incorrect email or password\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"incorrect email or password\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query login ($email: String!, $password: String!){\n  authenticate (email: $email, password:$password){\n    token\n    refresh\n    accessTokenExpiry\n    refreshTokenExpiry\n    user{\n      id\n      name\n      kind\n      email\n      agent{\n        partners{\n          id\n          name\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n    \"email\" : \"\",\n    \"password\" : \"\"\n}"
									}
								},
								"url": {
									"raw": "https://staging-backend.bfree.com.ng/api/",
									"protocol": "https",
									"host": [
										"staging-backend",
										"bfree",
										"com",
										"ng"
									],
									"path": [
										"api",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Login as an agent with incorrect credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"incorrect email or password\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"incorrect email or password\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query login ($email: String!, $password: String!){\n  authenticate (email: $email, password:$password){\n    token\n    refresh\n    accessTokenExpiry\n    refreshTokenExpiry\n    user{\n      id\n      name\n      kind\n      email\n      agent{\n        partners{\n          id\n          name\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n    \"email\" : \"agent.test@gmial.com\",\n    \"password\" : \"\"\n}"
									}
								},
								"url": {
									"raw": "https://staging-backend.bfree.com.ng/api/",
									"protocol": "https",
									"host": [
										"staging-backend",
										"bfree",
										"com",
										"ng"
									],
									"path": [
										"api",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Login as an agent with incorrect credentials (email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"incorrect email or password\", function () {",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"incorrect email or password\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query login ($email: String!, $password: String!){\n  authenticate (email: $email, password:$password){\n    token\n    refresh\n    accessTokenExpiry\n    refreshTokenExpiry\n    user{\n      id\n      name\n      kind\n      email\n      agent{\n        partners{\n          id\n          name\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n    \"email\" : \"\",\n    \"password\" : \"555555\"\n}"
									}
								},
								"url": {
									"raw": "https://staging-backend.bfree.com.ng/api/",
									"protocol": "https",
									"host": [
										"staging-backend",
										"bfree",
										"com",
										"ng"
									],
									"path": [
										"api",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "searchCustomer by tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Agent-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query searchCustomer ($page: Page!, $q: CustomerSearchRequest) {\n    searchCustomer (page: $page, q: $q) {\n        items {\n            id\n            partnerId\n            agentId\n            userId\n            loanId\n            systemId\n            name\n            address\n            lga\n            city\n            state\n            accountNumber\n            bankName\n            telephone\n            userTelephone\n            bvnNumber\n            bvnTelephone\n            guarantorName\n            guarantorAddress\n            guarantorTelephone\n            guarantorRelationship\n            createdAt\n            updatedAt\n            assignedAt\n            weight\n            risk\n            classification\n            dnd\n            dndAt\n            tags\n            balanceRemaining\n            instalments{\n                id\n                amountPreviouslyPaidByCustomer\n                amountCollected\n            }\n        }\n      }\n  }\n",
										"variables": "{\n  \"page\": {\n    \"number\": 1,\n    \"size\": 10,\n    \"sortBy\": \"updated_at\",\n    \"sortDirectionDesc\": true\n  },\n  \"q\": {\n    \"partnerIds\": [\n        \"fbeca4ee-c5f0-47f3-99d6-3adec9a2907f\"\n    ],\n    \"agentId\": \"539a421d-0eef-4b9c-84b1-d64b3079e86e\",\n    \"completed\": false,\n    \"strictlyHasInstalment\": true,\n     \"reached\": false,\n     \"ptpType\": null,\n     \"tag\": \"91-120\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url }}",
									"host": [
										"{{url }}"
									]
								}
							},
							"response": []
						},
						{
							"name": "searchCustomer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Agent-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query searchCustomer ($page: Page!, $q: CustomerSearchRequest) {\n    searchCustomer (page: $page, q: $q) {\n        items {\n            id\n            partnerId\n            agentId\n            userId\n            loanId\n            systemId\n            name\n            address\n            lga\n            city\n            state\n            accountNumber\n            bankName\n            telephone\n            userTelephone\n            bvnNumber\n            bvnTelephone\n            guarantorName\n            guarantorAddress\n            guarantorTelephone\n            guarantorRelationship\n            createdAt\n            updatedAt\n            assignedAt\n            weight\n            risk\n            classification\n            dnd\n            dndAt\n            tags\n            balanceRemaining\n            instalments{\n                id\n                amountPreviouslyPaidByCustomer\n                amountCollected\n            }\n        }\n      }\n  }\n",
										"variables": "{\n  \"page\": {\n    \"number\": 1,\n    \"size\": 10,\n    \"sortBy\": \"updated_at\",\n    \"sortDirectionDesc\": true\n  },\n  \"q\": {\n    \"partnerIds\": [\n        \"fbeca4ee-c5f0-47f3-99d6-3adec9a2907f\",\n        \"89e47c63-406f-46a6-8f4f-82af8eb963cf\"\n    ],\n    \"completed\": false,\n    \"strictlyHasInstalment\": true,\n     \"reached\": true,\n     \"ptpType\": null\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url }}",
									"host": [
										"{{url }}"
									]
								}
							},
							"response": []
						},
						{
							"name": "searchCustomerByPtpDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Agent-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query searchCustomerByPtpDate ($page: Page!, $day: String!) {\n    searchCustomerByPtpDate (page: $page, day: $day) {\n        items {\n            id\n            loanId\n            name\n            tags\n          balanceRemaining\n          instalments{\n            id\n            customerId\n            loanInstalmentId\n            totalAmountToRepay\n            \n          }\n        }\n  }\n  \n}",
										"variables": "{\n  \"page\": {\n    \"number\": 1,\n    \"size\": 10,\n    \"sortBy\": \"created_at\",\n    \"sortDirectionDesc\": true\n  },\n  \"day\": \"2021-12-31\"\n}"
									}
								},
								"url": {
									"raw": "{{url }}",
									"host": [
										"{{url }}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}